{"version":3,"sources":["webpack:///./src/helpers/index.js","webpack:///./src/components/posts/postcard.js","webpack:///./src/pages/post.js"],"names":["Helpers","getStringDate","isoDate","newDate","Date","getDate","getMonth","getFullYear","postcard","item","className","class","to","url_id","title","source","content","substring","tags","map","tag","datetime","created_at","Helper","query","PostPage","data","allStrapiPosts","nodes","key","id"],"mappings":"iQAwBeA,E,kCAvBNC,cAAP,SAAqBC,GACnB,IAcIC,EAAU,IAAIC,KAAKF,GAIvB,OAHoBC,EAAQE,UAAd,IAfC,CACb,OACA,QACA,OACA,QACA,QACA,UACA,SACA,UACA,QACA,OACA,QACA,UAIOF,EAAQG,YADH,IAEVH,EAAQI,e,KC6BDC,EA3CE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClB,OACE,yBAAKC,UAAU,iCACb,yBAAKC,MAAM,QACT,yBAAKA,MAAM,gBACT,wBAAID,UAAU,SACZ,kBAAC,OAAD,CAAME,GAAE,QAAUH,EAAKI,QAAWJ,EAAKK,QAWzC,kBAAC,IAAD,CAAeC,OAAQN,EAAKO,QAAQC,UAAU,EAAG,OACjD,8BACE,kBAAC,OAAD,CAAML,GAAE,QAAUH,EAAKI,QAAvB,yBAGJ,4BAAQF,MAAM,eACZ,yBAAKA,MAAM,oBACT,yBAAKD,UAAU,aACZD,EAAKS,KAAKC,KAAI,SAACC,GAAD,OACb,kBAAC,IAAD,CAAKA,IAAKA,SAIhB,uBAAGT,MAAM,oBACP,8BACE,0BAAMU,SAAUZ,EAAKa,YAClBC,EAAOtB,cAAcQ,EAAKa,mBCnB9BE,G,UAAK,cAgCHC,UA7CE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKZ,MAAM,UACX,6BAASJ,UAAU,qBACjB,yBAAKA,UAAU,0EACZgB,EAAKC,eAAeC,MAAMT,KAAI,SAACV,GAAD,OAC7B,kBAAC,EAAD,CAAUoB,IAAKpB,EAAKqB,GAAIrB,KAAMA","file":"component---src-pages-post-js-569b4510f710ddd94cc1.js","sourcesContent":["class Helpers {\r\n  static getStringDate(isoDate) {\r\n    const months = [\r\n      \"Ocak\",\r\n      \"Şubat\",\r\n      \"Mart\",\r\n      \"Nisan\",\r\n      \"Mayıs\",\r\n      \"Haziran\",\r\n      \"Temmuz\",\r\n      \"Ağustos\",\r\n      \"Eylül\",\r\n      \"Ekim\",\r\n      \"Kasım\",\r\n      \"Aralık\",\r\n    ];\r\n    let newDate = new Date(isoDate);\r\n    let dateString = `${newDate.getDate()} ${\r\n      months[newDate.getMonth()]\r\n    } ${newDate.getFullYear()}`;\r\n    return dateString;\r\n  }\r\n}\r\n\r\nexport default Helpers;\r\n","import React from \"react\";\r\nimport { Link, Img } from \"gatsby\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport Tag from \"./tags\";\r\nimport Helper from \"../../helpers/index\";\r\nconst postcard = ({ item }) => {\r\n  return (\r\n    <div className=\"column is-7 article post-card\">\r\n      <div class=\"card\">\r\n        <div class=\"card-content\">\r\n          <h1 className=\"title\">\r\n            <Link to={`post/${item.url_id}`}>{item.title}</Link>\r\n          </h1>\r\n          {/* {item.tumblr_img ? (\r\n            <Link to={`post/${item.url_id}`}>\r\n              <Img\r\n                className=\"mb-3\"\r\n                fluid={item.tumblr_img.childImageSharp.fluid}\r\n                alt={item.title}\r\n              />\r\n            </Link>\r\n          ) : null} */}\r\n          <ReactMarkdown source={item.content.substring(0, 350)} />\r\n          <span>\r\n            <Link to={`post/${item.url_id}`}>..devamını okuyayım</Link>\r\n          </span>\r\n        </div>\r\n        <footer class=\"card-footer\">\r\n          <div class=\"card-footer-item\">\r\n            <div className=\"post-tags\">\r\n              {item.tags.map((tag) => (\r\n                <Tag tag={tag} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <p class=\"card-footer-item\">\r\n            <span>\r\n              <time datetime={item.created_at}>\r\n                {Helper.getStringDate(item.created_at)}\r\n              </time>\r\n            </span>\r\n          </p>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default postcard;\r\n","import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../components/layout\";\r\nimport SEO from \"../components/seo\";\r\nimport PostCard from \"../components/posts/postcard\";\r\nimport \"../style/post.scss\";\r\nconst PostPage = ({ data }) => (\r\n  <Layout>\r\n    <SEO title=\"Posts\" />\r\n    <section className=\"section pl-0 pr-0\">\r\n      <div className=\"container d-flex flex-column justify-content-center align-items-center\">\r\n        {data.allStrapiPosts.nodes.map((item) => (\r\n          <PostCard key={item.id} item={item} />\r\n        ))}\r\n      </div>\r\n    </section>\r\n  </Layout>\r\n);\r\n\r\nexport const query = graphql`\r\n  {\r\n    allStrapiPosts(sort: { order: DESC, fields: created_at }) {\r\n      nodes {\r\n        title\r\n        url_id\r\n        strapiId\r\n        content\r\n        created_at\r\n        tumblr_img {\r\n          childImageSharp {\r\n            fluid(maxWidth: 10000) {\r\n              ...GatsbyImageSharpFluid\r\n            }\r\n          }\r\n        }\r\n        tags {\r\n          id\r\n          image {\r\n            id\r\n            childImageSharp {\r\n              fixed(width: 25, height: 25) {\r\n                ...GatsbyImageSharpFixed\r\n              }\r\n            }\r\n          }\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport default PostPage;\r\n"],"sourceRoot":""}